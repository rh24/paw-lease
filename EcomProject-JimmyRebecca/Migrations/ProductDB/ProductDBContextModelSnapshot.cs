// <auto-generated />
using System;
using EcomProject_JimmyRebecca.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EcomProject_JimmyRebecca.Migrations.ProductDB
{
    [DbContext(typeof(ProductDBContext))]
    partial class ProductDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EcomProject_JimmyRebecca.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTime>("AccountCreation");

                    b.Property<string>("Address");

                    b.Property<DateTime>("Birthday");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<bool>("LovesCats");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("EcomProject_JimmyRebecca.Models.Cart", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("OrderFulfilled");

                    b.Property<string>("UserId");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("EcomProject_JimmyRebecca.Models.LineItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartID");

                    b.Property<int>("ProductID");

                    b.Property<int>("Quantity");

                    b.HasKey("ID");

                    b.HasIndex("CartID");

                    b.HasIndex("ProductID");

                    b.ToTable("LineItems");
                });

            modelBuilder.Entity("EcomProject_JimmyRebecca.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsCat");

                    b.Property<string>("ProductName")
                        .IsRequired();

                    b.Property<decimal>("SuggestedDonation");

                    b.HasKey("ID");

                    b.ToTable("Products");

                    b.HasData(
                        new { ID = 1, Description = "It's garfield, who doesn't want garfield???", IsCat = true, ProductName = "Tabby", SuggestedDonation = 900m },
                        new { ID = 2, Description = "Endless fun! For your cat too, I guess...", IsCat = false, ProductName = "Laser Pointer", SuggestedDonation = 30m },
                        new { ID = 3, Description = "When you just don't wanna deal with them anymore", IsCat = false, ProductName = "Catnip", SuggestedDonation = 35m },
                        new { ID = 4, Description = "Scottish folds are normal cats that fold their ears.", IsCat = true, ProductName = "Scottish Fold", SuggestedDonation = 1100m },
                        new { ID = 5, Description = "They might not like it, but it'll keep them warm", IsCat = false, ProductName = "Cat-shirt", SuggestedDonation = 40m },
                        new { ID = 6, Description = "This is where lion king started", IsCat = false, ProductName = "Cat Post", SuggestedDonation = 75m },
                        new { ID = 7, Description = "It's like a bengal, but less dangerous.", IsCat = true, ProductName = "Bengal", SuggestedDonation = 900m },
                        new { ID = 8, Description = "Buy a cat a home, they'll leave you forever.", IsCat = false, ProductName = "Cat-stle", SuggestedDonation = 120m },
                        new { ID = 9, Description = "When you want mindless zombies...", IsCat = false, ProductName = "Cat Food", SuggestedDonation = 50m },
                        new { ID = 10, Description = "If you enjoy vodka, this is your friend.", IsCat = true, ProductName = "Russian Blue", SuggestedDonation = 900m }
                    );
                });

            modelBuilder.Entity("EcomProject_JimmyRebecca.Models.Cart", b =>
                {
                    b.HasOne("EcomProject_JimmyRebecca.Models.ApplicationUser", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("EcomProject_JimmyRebecca.Models.LineItem", b =>
                {
                    b.HasOne("EcomProject_JimmyRebecca.Models.Cart", "Cart")
                        .WithMany("LineItems")
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EcomProject_JimmyRebecca.Models.Product", "Product")
                        .WithMany("LineItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
